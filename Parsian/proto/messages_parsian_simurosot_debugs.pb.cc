// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_parsian_simurosot_debugs.proto
#include "stdafx.h"

#include "messages_parsian_simurosot_debugs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Color;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Log;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vec2;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Vec2D;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Cir2D;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Pol2D;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Rec2D;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Seg2D;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Tex2D;
}  // namespace protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto
class ColorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Color>
      _instance;
} _Color_default_instance_;
class Vec2DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vec2>
      _instance;
} _Vec2_default_instance_;
class Vec2DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vec2D>
      _instance;
} _Vec2D_default_instance_;
class Cir2DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Cir2D>
      _instance;
} _Cir2D_default_instance_;
class Seg2DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Seg2D>
      _instance;
} _Seg2D_default_instance_;
class Rec2DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rec2D>
      _instance;
} _Rec2D_default_instance_;
class Tex2DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tex2D>
      _instance;
} _Tex2D_default_instance_;
class Pol2DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Pol2D>
      _instance;
} _Pol2D_default_instance_;
class DrawsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Draws>
      _instance;
} _Draws_default_instance_;
class LogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Log>
      _instance;
} _Log_default_instance_;
class LogsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Logs>
      _instance;
} _Logs_default_instance_;
namespace protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto {
static void InitDefaultsColor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Color_default_instance_;
    new (ptr) ::Color();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Color::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Color =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsColor}, {}};

static void InitDefaultsVec2() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Vec2_default_instance_;
    new (ptr) ::Vec2();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Vec2::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Vec2 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVec2}, {}};

static void InitDefaultsVec2D() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Vec2D_default_instance_;
    new (ptr) ::Vec2D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Vec2D::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Vec2D =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsVec2D}, {
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Color.base,}};

static void InitDefaultsCir2D() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Cir2D_default_instance_;
    new (ptr) ::Cir2D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Cir2D::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Cir2D =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCir2D}, {
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Vec2.base,
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Color.base,}};

static void InitDefaultsSeg2D() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Seg2D_default_instance_;
    new (ptr) ::Seg2D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Seg2D::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Seg2D =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSeg2D}, {
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Vec2.base,
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Color.base,}};

static void InitDefaultsRec2D() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Rec2D_default_instance_;
    new (ptr) ::Rec2D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rec2D::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Rec2D =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRec2D}, {
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Vec2.base,
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Color.base,}};

static void InitDefaultsTex2D() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Tex2D_default_instance_;
    new (ptr) ::Tex2D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tex2D::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Tex2D =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTex2D}, {
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Vec2.base,
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Color.base,}};

static void InitDefaultsPol2D() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Pol2D_default_instance_;
    new (ptr) ::Pol2D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Pol2D::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Pol2D =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPol2D}, {
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Vec2.base,
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Color.base,}};

static void InitDefaultsDraws() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Draws_default_instance_;
    new (ptr) ::Draws();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Draws::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_Draws =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsDraws}, {
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Vec2D.base,
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Cir2D.base,
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Seg2D.base,
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Rec2D.base,
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Pol2D.base,
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Tex2D.base,}};

static void InitDefaultsLog() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Log_default_instance_;
    new (ptr) ::Log();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Log::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Log =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLog}, {}};

static void InitDefaultsLogs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Logs_default_instance_;
    new (ptr) ::Logs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Logs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Logs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLogs}, {
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Log.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Color.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Vec2.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Vec2D.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Cir2D.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Seg2D.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rec2D.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Tex2D.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Pol2D.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Draws.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Log.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Logs.base);
}

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Color, r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Color, g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Color, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Color, a_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Vec2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Vec2, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Vec2, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Vec2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Vec2D, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Vec2D, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Vec2D, color_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Cir2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Cir2D, center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Cir2D, startangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Cir2D, endangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Cir2D, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Cir2D, fill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Cir2D, color_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Seg2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Seg2D, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Seg2D, terminal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Seg2D, color_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rec2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rec2D, topleft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rec2D, botright_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rec2D, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Rec2D, fill_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Tex2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Tex2D, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Tex2D, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Tex2D, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Tex2D, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pol2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pol2D, vectors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pol2D, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Pol2D, fill_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Draws, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Draws, vectors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Draws, circles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Draws, segments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Draws, rects_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Draws, polygons_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Draws, texts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Log, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Log, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Log, file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Log, function_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Log, line_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Logs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Logs, msgs_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Color)},
  { 9, -1, sizeof(::Vec2)},
  { 16, -1, sizeof(::Vec2D)},
  { 24, -1, sizeof(::Cir2D)},
  { 35, -1, sizeof(::Seg2D)},
  { 43, -1, sizeof(::Rec2D)},
  { 52, -1, sizeof(::Tex2D)},
  { 61, -1, sizeof(::Pol2D)},
  { 69, -1, sizeof(::Draws)},
  { 80, -1, sizeof(::Log)},
  { 90, -1, sizeof(::Logs)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Color_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Vec2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Vec2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Cir2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Seg2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Rec2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Tex2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Pol2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Draws_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Log_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Logs_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "messages_parsian_simurosot_debugs.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\'messages_parsian_simurosot_debugs.prot"
      "o\"3\n\005Color\022\t\n\001r\030\001 \001(\002\022\t\n\001g\030\002 \001(\002\022\t\n\001b\030\003 "
      "\001(\002\022\t\n\001a\030\004 \001(\002\"\034\n\004Vec2\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002"
      " \001(\002\"4\n\005Vec2D\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\025\n\005c"
      "olor\030\003 \001(\0132\006.Color\"y\n\005Cir2D\022\025\n\006center\030\001 "
      "\001(\0132\005.Vec2\022\022\n\nstartAngle\030\002 \001(\002\022\020\n\010endAng"
      "le\030\003 \001(\002\022\016\n\006radius\030\004 \001(\002\022\014\n\004fill\030\005 \001(\010\022\025"
      "\n\005color\030\006 \001(\0132\006.Color\"N\n\005Seg2D\022\025\n\006origin"
      "\030\001 \001(\0132\005.Vec2\022\027\n\010terminal\030\002 \001(\0132\005.Vec2\022\025"
      "\n\005color\030\003 \001(\0132\006.Color\"]\n\005Rec2D\022\026\n\007topLef"
      "t\030\001 \001(\0132\005.Vec2\022\027\n\010BotRight\030\002 \001(\0132\005.Vec2\022"
      "\025\n\005color\030\003 \001(\0132\006.Color\022\014\n\004fill\030\004 \001(\010\"N\n\005"
      "Tex2D\022\022\n\003pos\030\001 \001(\0132\005.Vec2\022\014\n\004size\030\002 \001(\002\022"
      "\025\n\005color\030\003 \001(\0132\006.Color\022\014\n\004data\030\004 \001(\t\"D\n\005"
      "Pol2D\022\026\n\007vectors\030\001 \003(\0132\005.Vec2\022\025\n\005color\030\002"
      " \001(\0132\006.Color\022\014\n\004fill\030\003 \001(\010\"\233\001\n\005Draws\022\027\n\007"
      "vectors\030\001 \003(\0132\006.Vec2D\022\027\n\007circles\030\002 \003(\0132\006"
      ".Cir2D\022\030\n\010segments\030\003 \003(\0132\006.Seg2D\022\025\n\005rect"
      "s\030\004 \003(\0132\006.Rec2D\022\030\n\010polygons\030\005 \003(\0132\006.Pol2"
      "D\022\025\n\005texts\030\006 \003(\0132\006.Tex2D\"Z\n\003Log\022\030\n\005level"
      "\030\001 \001(\0162\t.LogLevel\022\013\n\003msg\030\002 \001(\t\022\014\n\004file\030\003"
      " \001(\t\022\020\n\010function\030\004 \001(\t\022\014\n\004line\030\005 \001(\t\"\032\n\004"
      "Logs\022\022\n\004msgs\030\001 \003(\0132\004.Log*N\n\010LogLevel\022\014\n\010"
      "LL_DEBUG\020\000\022\013\n\007LL_INFO\020\001\022\013\n\007LL_WARN\020\002\022\014\n\010"
      "LL_ERROR\020\003\022\014\n\010LL_FATAL\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 992);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages_parsian_simurosot_debugs.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto
const ::google::protobuf::EnumDescriptor* LogLevel_descriptor() {
  protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::file_level_enum_descriptors[0];
}
bool LogLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Color::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Color::kRFieldNumber;
const int Color::kGFieldNumber;
const int Color::kBFieldNumber;
const int Color::kAFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Color::Color()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Color.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Color)
}
Color::Color(const Color& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_)) + sizeof(a_));
  // @@protoc_insertion_point(copy_constructor:Color)
}

void Color::SharedCtor() {
  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&r_)) + sizeof(a_));
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:Color)
  SharedDtor();
}

void Color::SharedDtor() {
}

void Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Color::descriptor() {
  ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Color& Color::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Color.base);
  return *internal_default_instance();
}


void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:Color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&r_)) + sizeof(a_));
  _internal_metadata_.Clear();
}

bool Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Color)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float r = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float g = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float b = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float a = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Color)
  return false;
#undef DO_
}

void Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float r = 1;
  if (this->r() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->r(), output);
  }

  // float g = 2;
  if (this->g() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->g(), output);
  }

  // float b = 3;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->b(), output);
  }

  // float a = 4;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->a(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Color)
}

::google::protobuf::uint8* Color::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float r = 1;
  if (this->r() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->r(), target);
  }

  // float g = 2;
  if (this->g() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->g(), target);
  }

  // float b = 3;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->b(), target);
  }

  // float a = 4;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->a(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Color)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float r = 1;
  if (this->r() != 0) {
    total_size += 1 + 4;
  }

  // float g = 2;
  if (this->g() != 0) {
    total_size += 1 + 4;
  }

  // float b = 3;
  if (this->b() != 0) {
    total_size += 1 + 4;
  }

  // float a = 4;
  if (this->a() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Color::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Color)
  GOOGLE_DCHECK_NE(&from, this);
  const Color* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Color>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Color)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.r() != 0) {
    set_r(from.r());
  }
  if (from.g() != 0) {
    set_g(from.g());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
  if (from.a() != 0) {
    set_a(from.a());
  }
}

void Color::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::Swap(Color* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Color::InternalSwap(Color* other) {
  using std::swap;
  swap(r_, other->r_);
  swap(g_, other->g_);
  swap(b_, other->b_);
  swap(a_, other->a_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Color::GetMetadata() const {
  protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vec2::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vec2::kXFieldNumber;
const int Vec2::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vec2::Vec2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Vec2.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vec2)
}
Vec2::Vec2(const Vec2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Vec2)
}

void Vec2::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vec2::~Vec2() {
  // @@protoc_insertion_point(destructor:Vec2)
  SharedDtor();
}

void Vec2::SharedDtor() {
}

void Vec2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Vec2::descriptor() {
  ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vec2& Vec2::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Vec2.base);
  return *internal_default_instance();
}


void Vec2::Clear() {
// @@protoc_insertion_point(message_clear_start:Vec2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool Vec2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Vec2)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Vec2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Vec2)
  return false;
#undef DO_
}

void Vec2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Vec2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Vec2)
}

::google::protobuf::uint8* Vec2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Vec2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vec2)
  return target;
}

size_t Vec2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vec2)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vec2)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vec2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vec2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vec2)
    MergeFrom(*source);
  }
}

void Vec2::MergeFrom(const Vec2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vec2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Vec2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec2::CopyFrom(const Vec2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2::IsInitialized() const {
  return true;
}

void Vec2::Swap(Vec2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vec2::InternalSwap(Vec2* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Vec2::GetMetadata() const {
  protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vec2D::InitAsDefaultInstance() {
  ::_Vec2D_default_instance_._instance.get_mutable()->color_ = const_cast< ::Color*>(
      ::Color::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vec2D::kXFieldNumber;
const int Vec2D::kYFieldNumber;
const int Vec2D::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vec2D::Vec2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Vec2D.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vec2D)
}
Vec2D::Vec2D(const Vec2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_color()) {
    color_ = new ::Color(*from.color_);
  } else {
    color_ = NULL;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Vec2D)
}

void Vec2D::SharedCtor() {
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&color_)) + sizeof(y_));
}

Vec2D::~Vec2D() {
  // @@protoc_insertion_point(destructor:Vec2D)
  SharedDtor();
}

void Vec2D::SharedDtor() {
  if (this != internal_default_instance()) delete color_;
}

void Vec2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Vec2D::descriptor() {
  ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vec2D& Vec2D::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Vec2D.base);
  return *internal_default_instance();
}


void Vec2D::Clear() {
// @@protoc_insertion_point(message_clear_start:Vec2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool Vec2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Vec2D)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Color color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Vec2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Vec2D)
  return false;
#undef DO_
}

void Vec2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Vec2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // .Color color = 3;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_color(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Vec2D)
}

::google::protobuf::uint8* Vec2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Vec2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // .Color color = 3;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_color(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vec2D)
  return target;
}

size_t Vec2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vec2D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Color color = 3;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vec2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vec2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vec2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vec2D)
    MergeFrom(*source);
  }
}

void Vec2D::MergeFrom(const Vec2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vec2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_color()) {
    mutable_color()->::Color::MergeFrom(from.color());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Vec2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vec2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec2D::CopyFrom(const Vec2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vec2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2D::IsInitialized() const {
  return true;
}

void Vec2D::Swap(Vec2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vec2D::InternalSwap(Vec2D* other) {
  using std::swap;
  swap(color_, other->color_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Vec2D::GetMetadata() const {
  protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Cir2D::InitAsDefaultInstance() {
  ::_Cir2D_default_instance_._instance.get_mutable()->center_ = const_cast< ::Vec2*>(
      ::Vec2::internal_default_instance());
  ::_Cir2D_default_instance_._instance.get_mutable()->color_ = const_cast< ::Color*>(
      ::Color::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cir2D::kCenterFieldNumber;
const int Cir2D::kStartAngleFieldNumber;
const int Cir2D::kEndAngleFieldNumber;
const int Cir2D::kRadiusFieldNumber;
const int Cir2D::kFillFieldNumber;
const int Cir2D::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cir2D::Cir2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Cir2D.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cir2D)
}
Cir2D::Cir2D(const Cir2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_center()) {
    center_ = new ::Vec2(*from.center_);
  } else {
    center_ = NULL;
  }
  if (from.has_color()) {
    color_ = new ::Color(*from.color_);
  } else {
    color_ = NULL;
  }
  ::memcpy(&startangle_, &from.startangle_,
    static_cast<size_t>(reinterpret_cast<char*>(&fill_) -
    reinterpret_cast<char*>(&startangle_)) + sizeof(fill_));
  // @@protoc_insertion_point(copy_constructor:Cir2D)
}

void Cir2D::SharedCtor() {
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fill_) -
      reinterpret_cast<char*>(&center_)) + sizeof(fill_));
}

Cir2D::~Cir2D() {
  // @@protoc_insertion_point(destructor:Cir2D)
  SharedDtor();
}

void Cir2D::SharedDtor() {
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete color_;
}

void Cir2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Cir2D::descriptor() {
  ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Cir2D& Cir2D::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Cir2D.base);
  return *internal_default_instance();
}


void Cir2D::Clear() {
// @@protoc_insertion_point(message_clear_start:Cir2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && center_ != NULL) {
    delete center_;
  }
  center_ = NULL;
  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
  ::memset(&startangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fill_) -
      reinterpret_cast<char*>(&startangle_)) + sizeof(fill_));
  _internal_metadata_.Clear();
}

bool Cir2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cir2D)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Vec2 center = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float startAngle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float endAngle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &endangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float radius = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fill = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Color color = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cir2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cir2D)
  return false;
#undef DO_
}

void Cir2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cir2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Vec2 center = 1;
  if (this->has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_center(), output);
  }

  // float startAngle = 2;
  if (this->startangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->startangle(), output);
  }

  // float endAngle = 3;
  if (this->endangle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->endangle(), output);
  }

  // float radius = 4;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->radius(), output);
  }

  // bool fill = 5;
  if (this->fill() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fill(), output);
  }

  // .Color color = 6;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_color(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Cir2D)
}

::google::protobuf::uint8* Cir2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Cir2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Vec2 center = 1;
  if (this->has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_center(), deterministic, target);
  }

  // float startAngle = 2;
  if (this->startangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->startangle(), target);
  }

  // float endAngle = 3;
  if (this->endangle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->endangle(), target);
  }

  // float radius = 4;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->radius(), target);
  }

  // bool fill = 5;
  if (this->fill() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fill(), target);
  }

  // .Color color = 6;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_color(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cir2D)
  return target;
}

size_t Cir2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Cir2D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Vec2 center = 1;
  if (this->has_center()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // .Color color = 6;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // float startAngle = 2;
  if (this->startangle() != 0) {
    total_size += 1 + 4;
  }

  // float endAngle = 3;
  if (this->endangle() != 0) {
    total_size += 1 + 4;
  }

  // float radius = 4;
  if (this->radius() != 0) {
    total_size += 1 + 4;
  }

  // bool fill = 5;
  if (this->fill() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cir2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Cir2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Cir2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cir2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Cir2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Cir2D)
    MergeFrom(*source);
  }
}

void Cir2D::MergeFrom(const Cir2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Cir2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center()) {
    mutable_center()->::Vec2::MergeFrom(from.center());
  }
  if (from.has_color()) {
    mutable_color()->::Color::MergeFrom(from.color());
  }
  if (from.startangle() != 0) {
    set_startangle(from.startangle());
  }
  if (from.endangle() != 0) {
    set_endangle(from.endangle());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
  if (from.fill() != 0) {
    set_fill(from.fill());
  }
}

void Cir2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Cir2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cir2D::CopyFrom(const Cir2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Cir2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cir2D::IsInitialized() const {
  return true;
}

void Cir2D::Swap(Cir2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cir2D::InternalSwap(Cir2D* other) {
  using std::swap;
  swap(center_, other->center_);
  swap(color_, other->color_);
  swap(startangle_, other->startangle_);
  swap(endangle_, other->endangle_);
  swap(radius_, other->radius_);
  swap(fill_, other->fill_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Cir2D::GetMetadata() const {
  protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Seg2D::InitAsDefaultInstance() {
  ::_Seg2D_default_instance_._instance.get_mutable()->origin_ = const_cast< ::Vec2*>(
      ::Vec2::internal_default_instance());
  ::_Seg2D_default_instance_._instance.get_mutable()->terminal_ = const_cast< ::Vec2*>(
      ::Vec2::internal_default_instance());
  ::_Seg2D_default_instance_._instance.get_mutable()->color_ = const_cast< ::Color*>(
      ::Color::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Seg2D::kOriginFieldNumber;
const int Seg2D::kTerminalFieldNumber;
const int Seg2D::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Seg2D::Seg2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Seg2D.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Seg2D)
}
Seg2D::Seg2D(const Seg2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::Vec2(*from.origin_);
  } else {
    origin_ = NULL;
  }
  if (from.has_terminal()) {
    terminal_ = new ::Vec2(*from.terminal_);
  } else {
    terminal_ = NULL;
  }
  if (from.has_color()) {
    color_ = new ::Color(*from.color_);
  } else {
    color_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Seg2D)
}

void Seg2D::SharedCtor() {
  ::memset(&origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&origin_)) + sizeof(color_));
}

Seg2D::~Seg2D() {
  // @@protoc_insertion_point(destructor:Seg2D)
  SharedDtor();
}

void Seg2D::SharedDtor() {
  if (this != internal_default_instance()) delete origin_;
  if (this != internal_default_instance()) delete terminal_;
  if (this != internal_default_instance()) delete color_;
}

void Seg2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Seg2D::descriptor() {
  ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Seg2D& Seg2D::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Seg2D.base);
  return *internal_default_instance();
}


void Seg2D::Clear() {
// @@protoc_insertion_point(message_clear_start:Seg2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && origin_ != NULL) {
    delete origin_;
  }
  origin_ = NULL;
  if (GetArenaNoVirtual() == NULL && terminal_ != NULL) {
    delete terminal_;
  }
  terminal_ = NULL;
  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
  _internal_metadata_.Clear();
}

bool Seg2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Seg2D)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Vec2 origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Vec2 terminal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_terminal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Color color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Seg2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Seg2D)
  return false;
#undef DO_
}

void Seg2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Seg2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Vec2 origin = 1;
  if (this->has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_origin(), output);
  }

  // .Vec2 terminal = 2;
  if (this->has_terminal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_terminal(), output);
  }

  // .Color color = 3;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_color(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Seg2D)
}

::google::protobuf::uint8* Seg2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Seg2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Vec2 origin = 1;
  if (this->has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_origin(), deterministic, target);
  }

  // .Vec2 terminal = 2;
  if (this->has_terminal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_terminal(), deterministic, target);
  }

  // .Color color = 3;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_color(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Seg2D)
  return target;
}

size_t Seg2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Seg2D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Vec2 origin = 1;
  if (this->has_origin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *origin_);
  }

  // .Vec2 terminal = 2;
  if (this->has_terminal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *terminal_);
  }

  // .Color color = 3;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *color_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Seg2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Seg2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Seg2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Seg2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Seg2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Seg2D)
    MergeFrom(*source);
  }
}

void Seg2D::MergeFrom(const Seg2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Seg2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_origin()) {
    mutable_origin()->::Vec2::MergeFrom(from.origin());
  }
  if (from.has_terminal()) {
    mutable_terminal()->::Vec2::MergeFrom(from.terminal());
  }
  if (from.has_color()) {
    mutable_color()->::Color::MergeFrom(from.color());
  }
}

void Seg2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Seg2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Seg2D::CopyFrom(const Seg2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Seg2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Seg2D::IsInitialized() const {
  return true;
}

void Seg2D::Swap(Seg2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Seg2D::InternalSwap(Seg2D* other) {
  using std::swap;
  swap(origin_, other->origin_);
  swap(terminal_, other->terminal_);
  swap(color_, other->color_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Seg2D::GetMetadata() const {
  protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Rec2D::InitAsDefaultInstance() {
  ::_Rec2D_default_instance_._instance.get_mutable()->topleft_ = const_cast< ::Vec2*>(
      ::Vec2::internal_default_instance());
  ::_Rec2D_default_instance_._instance.get_mutable()->botright_ = const_cast< ::Vec2*>(
      ::Vec2::internal_default_instance());
  ::_Rec2D_default_instance_._instance.get_mutable()->color_ = const_cast< ::Color*>(
      ::Color::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rec2D::kTopLeftFieldNumber;
const int Rec2D::kBotRightFieldNumber;
const int Rec2D::kColorFieldNumber;
const int Rec2D::kFillFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rec2D::Rec2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Rec2D.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rec2D)
}
Rec2D::Rec2D(const Rec2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_topleft()) {
    topleft_ = new ::Vec2(*from.topleft_);
  } else {
    topleft_ = NULL;
  }
  if (from.has_botright()) {
    botright_ = new ::Vec2(*from.botright_);
  } else {
    botright_ = NULL;
  }
  if (from.has_color()) {
    color_ = new ::Color(*from.color_);
  } else {
    color_ = NULL;
  }
  fill_ = from.fill_;
  // @@protoc_insertion_point(copy_constructor:Rec2D)
}

void Rec2D::SharedCtor() {
  ::memset(&topleft_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fill_) -
      reinterpret_cast<char*>(&topleft_)) + sizeof(fill_));
}

Rec2D::~Rec2D() {
  // @@protoc_insertion_point(destructor:Rec2D)
  SharedDtor();
}

void Rec2D::SharedDtor() {
  if (this != internal_default_instance()) delete topleft_;
  if (this != internal_default_instance()) delete botright_;
  if (this != internal_default_instance()) delete color_;
}

void Rec2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Rec2D::descriptor() {
  ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rec2D& Rec2D::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Rec2D.base);
  return *internal_default_instance();
}


void Rec2D::Clear() {
// @@protoc_insertion_point(message_clear_start:Rec2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && topleft_ != NULL) {
    delete topleft_;
  }
  topleft_ = NULL;
  if (GetArenaNoVirtual() == NULL && botright_ != NULL) {
    delete botright_;
  }
  botright_ = NULL;
  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
  fill_ = false;
  _internal_metadata_.Clear();
}

bool Rec2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rec2D)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Vec2 topLeft = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_topleft()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Vec2 BotRight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_botright()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Color color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fill = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rec2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rec2D)
  return false;
#undef DO_
}

void Rec2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rec2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Vec2 topLeft = 1;
  if (this->has_topleft()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_topleft(), output);
  }

  // .Vec2 BotRight = 2;
  if (this->has_botright()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_botright(), output);
  }

  // .Color color = 3;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_color(), output);
  }

  // bool fill = 4;
  if (this->fill() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fill(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Rec2D)
}

::google::protobuf::uint8* Rec2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Rec2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Vec2 topLeft = 1;
  if (this->has_topleft()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_topleft(), deterministic, target);
  }

  // .Vec2 BotRight = 2;
  if (this->has_botright()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_botright(), deterministic, target);
  }

  // .Color color = 3;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_color(), deterministic, target);
  }

  // bool fill = 4;
  if (this->fill() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->fill(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rec2D)
  return target;
}

size_t Rec2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rec2D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Vec2 topLeft = 1;
  if (this->has_topleft()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *topleft_);
  }

  // .Vec2 BotRight = 2;
  if (this->has_botright()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *botright_);
  }

  // .Color color = 3;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // bool fill = 4;
  if (this->fill() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rec2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rec2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Rec2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rec2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rec2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rec2D)
    MergeFrom(*source);
  }
}

void Rec2D::MergeFrom(const Rec2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rec2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_topleft()) {
    mutable_topleft()->::Vec2::MergeFrom(from.topleft());
  }
  if (from.has_botright()) {
    mutable_botright()->::Vec2::MergeFrom(from.botright());
  }
  if (from.has_color()) {
    mutable_color()->::Color::MergeFrom(from.color());
  }
  if (from.fill() != 0) {
    set_fill(from.fill());
  }
}

void Rec2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rec2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rec2D::CopyFrom(const Rec2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rec2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rec2D::IsInitialized() const {
  return true;
}

void Rec2D::Swap(Rec2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rec2D::InternalSwap(Rec2D* other) {
  using std::swap;
  swap(topleft_, other->topleft_);
  swap(botright_, other->botright_);
  swap(color_, other->color_);
  swap(fill_, other->fill_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rec2D::GetMetadata() const {
  protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Tex2D::InitAsDefaultInstance() {
  ::_Tex2D_default_instance_._instance.get_mutable()->pos_ = const_cast< ::Vec2*>(
      ::Vec2::internal_default_instance());
  ::_Tex2D_default_instance_._instance.get_mutable()->color_ = const_cast< ::Color*>(
      ::Color::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tex2D::kPosFieldNumber;
const int Tex2D::kSizeFieldNumber;
const int Tex2D::kColorFieldNumber;
const int Tex2D::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tex2D::Tex2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Tex2D.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tex2D)
}
Tex2D::Tex2D(const Tex2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_pos()) {
    pos_ = new ::Vec2(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_color()) {
    color_ = new ::Color(*from.color_);
  } else {
    color_ = NULL;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:Tex2D)
}

void Tex2D::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(size_));
}

Tex2D::~Tex2D() {
  // @@protoc_insertion_point(destructor:Tex2D)
  SharedDtor();
}

void Tex2D::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete color_;
}

void Tex2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Tex2D::descriptor() {
  ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Tex2D& Tex2D::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Tex2D.base);
  return *internal_default_instance();
}


void Tex2D::Clear() {
// @@protoc_insertion_point(message_clear_start:Tex2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
  size_ = 0;
  _internal_metadata_.Clear();
}

bool Tex2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tex2D)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Vec2 pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Color color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Tex2D.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tex2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tex2D)
  return false;
#undef DO_
}

void Tex2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tex2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Vec2 pos = 1;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_pos(), output);
  }

  // float size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->size(), output);
  }

  // .Color color = 3;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_color(), output);
  }

  // string data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Tex2D.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Tex2D)
}

::google::protobuf::uint8* Tex2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Tex2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Vec2 pos = 1;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_pos(), deterministic, target);
  }

  // float size = 2;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->size(), target);
  }

  // .Color color = 3;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_color(), deterministic, target);
  }

  // string data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Tex2D.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tex2D)
  return target;
}

size_t Tex2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tex2D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // .Vec2 pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .Color color = 3;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // float size = 2;
  if (this->size() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tex2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tex2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Tex2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Tex2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tex2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tex2D)
    MergeFrom(*source);
  }
}

void Tex2D::MergeFrom(const Tex2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tex2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_pos()) {
    mutable_pos()->::Vec2::MergeFrom(from.pos());
  }
  if (from.has_color()) {
    mutable_color()->::Color::MergeFrom(from.color());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void Tex2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tex2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tex2D::CopyFrom(const Tex2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tex2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tex2D::IsInitialized() const {
  return true;
}

void Tex2D::Swap(Tex2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tex2D::InternalSwap(Tex2D* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pos_, other->pos_);
  swap(color_, other->color_);
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Tex2D::GetMetadata() const {
  protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Pol2D::InitAsDefaultInstance() {
  ::_Pol2D_default_instance_._instance.get_mutable()->color_ = const_cast< ::Color*>(
      ::Color::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pol2D::kVectorsFieldNumber;
const int Pol2D::kColorFieldNumber;
const int Pol2D::kFillFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pol2D::Pol2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Pol2D.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Pol2D)
}
Pol2D::Pol2D(const Pol2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      vectors_(from.vectors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_color()) {
    color_ = new ::Color(*from.color_);
  } else {
    color_ = NULL;
  }
  fill_ = from.fill_;
  // @@protoc_insertion_point(copy_constructor:Pol2D)
}

void Pol2D::SharedCtor() {
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fill_) -
      reinterpret_cast<char*>(&color_)) + sizeof(fill_));
}

Pol2D::~Pol2D() {
  // @@protoc_insertion_point(destructor:Pol2D)
  SharedDtor();
}

void Pol2D::SharedDtor() {
  if (this != internal_default_instance()) delete color_;
}

void Pol2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Pol2D::descriptor() {
  ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pol2D& Pol2D::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Pol2D.base);
  return *internal_default_instance();
}


void Pol2D::Clear() {
// @@protoc_insertion_point(message_clear_start:Pol2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vectors_.Clear();
  if (GetArenaNoVirtual() == NULL && color_ != NULL) {
    delete color_;
  }
  color_ = NULL;
  fill_ = false;
  _internal_metadata_.Clear();
}

bool Pol2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Pol2D)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Vec2 vectors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vectors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Color color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fill = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Pol2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Pol2D)
  return false;
#undef DO_
}

void Pol2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Pol2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Vec2 vectors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vectors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->vectors(static_cast<int>(i)),
      output);
  }

  // .Color color = 2;
  if (this->has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_color(), output);
  }

  // bool fill = 3;
  if (this->fill() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->fill(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Pol2D)
}

::google::protobuf::uint8* Pol2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Pol2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Vec2 vectors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vectors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->vectors(static_cast<int>(i)), deterministic, target);
  }

  // .Color color = 2;
  if (this->has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_color(), deterministic, target);
  }

  // bool fill = 3;
  if (this->fill() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->fill(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pol2D)
  return target;
}

size_t Pol2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pol2D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Vec2 vectors = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->vectors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vectors(static_cast<int>(i)));
    }
  }

  // .Color color = 2;
  if (this->has_color()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // bool fill = 3;
  if (this->fill() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pol2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Pol2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Pol2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pol2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Pol2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Pol2D)
    MergeFrom(*source);
  }
}

void Pol2D::MergeFrom(const Pol2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Pol2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vectors_.MergeFrom(from.vectors_);
  if (from.has_color()) {
    mutable_color()->::Color::MergeFrom(from.color());
  }
  if (from.fill() != 0) {
    set_fill(from.fill());
  }
}

void Pol2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Pol2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pol2D::CopyFrom(const Pol2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pol2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pol2D::IsInitialized() const {
  return true;
}

void Pol2D::Swap(Pol2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pol2D::InternalSwap(Pol2D* other) {
  using std::swap;
  CastToBase(&vectors_)->InternalSwap(CastToBase(&other->vectors_));
  swap(color_, other->color_);
  swap(fill_, other->fill_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Pol2D::GetMetadata() const {
  protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Draws::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Draws::kVectorsFieldNumber;
const int Draws::kCirclesFieldNumber;
const int Draws::kSegmentsFieldNumber;
const int Draws::kRectsFieldNumber;
const int Draws::kPolygonsFieldNumber;
const int Draws::kTextsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Draws::Draws()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Draws.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Draws)
}
Draws::Draws(const Draws& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      vectors_(from.vectors_),
      circles_(from.circles_),
      segments_(from.segments_),
      rects_(from.rects_),
      polygons_(from.polygons_),
      texts_(from.texts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Draws)
}

void Draws::SharedCtor() {
}

Draws::~Draws() {
  // @@protoc_insertion_point(destructor:Draws)
  SharedDtor();
}

void Draws::SharedDtor() {
}

void Draws::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Draws::descriptor() {
  ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Draws& Draws::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Draws.base);
  return *internal_default_instance();
}


void Draws::Clear() {
// @@protoc_insertion_point(message_clear_start:Draws)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vectors_.Clear();
  circles_.Clear();
  segments_.Clear();
  rects_.Clear();
  polygons_.Clear();
  texts_.Clear();
  _internal_metadata_.Clear();
}

bool Draws::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Draws)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Vec2D vectors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vectors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Cir2D circles = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_circles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Seg2D segments = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_segments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Rec2D rects = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Pol2D polygons = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_polygons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Tex2D texts = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_texts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Draws)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Draws)
  return false;
#undef DO_
}

void Draws::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Draws)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Vec2D vectors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vectors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->vectors(static_cast<int>(i)),
      output);
  }

  // repeated .Cir2D circles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->circles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->circles(static_cast<int>(i)),
      output);
  }

  // repeated .Seg2D segments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->segments(static_cast<int>(i)),
      output);
  }

  // repeated .Rec2D rects = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->rects(static_cast<int>(i)),
      output);
  }

  // repeated .Pol2D polygons = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygons_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->polygons(static_cast<int>(i)),
      output);
  }

  // repeated .Tex2D texts = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->texts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->texts(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Draws)
}

::google::protobuf::uint8* Draws::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Draws)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Vec2D vectors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vectors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->vectors(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Cir2D circles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->circles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->circles(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Seg2D segments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->segments(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Rec2D rects = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->rects(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Pol2D polygons = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygons_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->polygons(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Tex2D texts = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->texts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->texts(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Draws)
  return target;
}

size_t Draws::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Draws)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Vec2D vectors = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->vectors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vectors(static_cast<int>(i)));
    }
  }

  // repeated .Cir2D circles = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->circles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->circles(static_cast<int>(i)));
    }
  }

  // repeated .Seg2D segments = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->segments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->segments(static_cast<int>(i)));
    }
  }

  // repeated .Rec2D rects = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->rects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rects(static_cast<int>(i)));
    }
  }

  // repeated .Pol2D polygons = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->polygons_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->polygons(static_cast<int>(i)));
    }
  }

  // repeated .Tex2D texts = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->texts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->texts(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Draws::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Draws)
  GOOGLE_DCHECK_NE(&from, this);
  const Draws* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Draws>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Draws)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Draws)
    MergeFrom(*source);
  }
}

void Draws::MergeFrom(const Draws& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Draws)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vectors_.MergeFrom(from.vectors_);
  circles_.MergeFrom(from.circles_);
  segments_.MergeFrom(from.segments_);
  rects_.MergeFrom(from.rects_);
  polygons_.MergeFrom(from.polygons_);
  texts_.MergeFrom(from.texts_);
}

void Draws::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Draws)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Draws::CopyFrom(const Draws& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Draws)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Draws::IsInitialized() const {
  return true;
}

void Draws::Swap(Draws* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Draws::InternalSwap(Draws* other) {
  using std::swap;
  CastToBase(&vectors_)->InternalSwap(CastToBase(&other->vectors_));
  CastToBase(&circles_)->InternalSwap(CastToBase(&other->circles_));
  CastToBase(&segments_)->InternalSwap(CastToBase(&other->segments_));
  CastToBase(&rects_)->InternalSwap(CastToBase(&other->rects_));
  CastToBase(&polygons_)->InternalSwap(CastToBase(&other->polygons_));
  CastToBase(&texts_)->InternalSwap(CastToBase(&other->texts_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Draws::GetMetadata() const {
  protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Log::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Log::kLevelFieldNumber;
const int Log::kMsgFieldNumber;
const int Log::kFileFieldNumber;
const int Log::kFunctionFieldNumber;
const int Log::kLineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Log::Log()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Log.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Log)
}
Log::Log(const Log& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file().size() > 0) {
    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  function_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.function().size() > 0) {
    function_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.function_);
  }
  line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.line().size() > 0) {
    line_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.line_);
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:Log)
}

void Log::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
}

Log::~Log() {
  // @@protoc_insertion_point(destructor:Log)
  SharedDtor();
}

void Log::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Log::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Log::descriptor() {
  ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Log& Log::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Log.base);
  return *internal_default_instance();
}


void Log::Clear() {
// @@protoc_insertion_point(message_clear_start:Log)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  _internal_metadata_.Clear();
}

bool Log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Log)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .LogLevel level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_level(static_cast< ::LogLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Log.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file().data(), static_cast<int>(this->file().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Log.file"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string function = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_function()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->function().data(), static_cast<int>(this->function().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Log.function"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string line = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_line()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->line().data(), static_cast<int>(this->line().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Log.line"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Log)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Log)
  return false;
#undef DO_
}

void Log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Log)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LogLevel level = 1;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->level(), output);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Log.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // string file = 3;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), static_cast<int>(this->file().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Log.file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file(), output);
  }

  // string function = 4;
  if (this->function().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->function().data(), static_cast<int>(this->function().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Log.function");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->function(), output);
  }

  // string line = 5;
  if (this->line().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->line().data(), static_cast<int>(this->line().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Log.line");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->line(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Log)
}

::google::protobuf::uint8* Log::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Log)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .LogLevel level = 1;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->level(), target);
  }

  // string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Log.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // string file = 3;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), static_cast<int>(this->file().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Log.file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file(), target);
  }

  // string function = 4;
  if (this->function().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->function().data(), static_cast<int>(this->function().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Log.function");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->function(), target);
  }

  // string line = 5;
  if (this->line().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->line().data(), static_cast<int>(this->line().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Log.line");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->line(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Log)
  return target;
}

size_t Log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Log)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // string file = 3;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file());
  }

  // string function = 4;
  if (this->function().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->function());
  }

  // string line = 5;
  if (this->line().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->line());
  }

  // .LogLevel level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Log::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Log)
  GOOGLE_DCHECK_NE(&from, this);
  const Log* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Log>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Log)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Log)
    MergeFrom(*source);
  }
}

void Log::MergeFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Log)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  if (from.function().size() > 0) {

    function_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.function_);
  }
  if (from.line().size() > 0) {

    line_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.line_);
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void Log::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Log::CopyFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log::IsInitialized() const {
  return true;
}

void Log::Swap(Log* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Log::InternalSwap(Log* other) {
  using std::swap;
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_.Swap(&other->file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  function_.Swap(&other->function_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  line_.Swap(&other->line_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(level_, other->level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Log::GetMetadata() const {
  protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Logs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Logs::kMsgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Logs::Logs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Logs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Logs)
}
Logs::Logs(const Logs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      msgs_(from.msgs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Logs)
}

void Logs::SharedCtor() {
}

Logs::~Logs() {
  // @@protoc_insertion_point(destructor:Logs)
  SharedDtor();
}

void Logs::SharedDtor() {
}

void Logs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Logs::descriptor() {
  ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Logs& Logs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::scc_info_Logs.base);
  return *internal_default_instance();
}


void Logs::Clear() {
// @@protoc_insertion_point(message_clear_start:Logs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgs_.Clear();
  _internal_metadata_.Clear();
}

bool Logs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Logs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Log msgs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_msgs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Logs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Logs)
  return false;
#undef DO_
}

void Logs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Logs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Log msgs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->msgs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->msgs(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Logs)
}

::google::protobuf::uint8* Logs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Logs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Log msgs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->msgs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->msgs(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Logs)
  return target;
}

size_t Logs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Logs)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Log msgs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->msgs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->msgs(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Logs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Logs)
  GOOGLE_DCHECK_NE(&from, this);
  const Logs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Logs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Logs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Logs)
    MergeFrom(*source);
  }
}

void Logs::MergeFrom(const Logs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Logs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgs_.MergeFrom(from.msgs_);
}

void Logs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Logs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logs::CopyFrom(const Logs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Logs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logs::IsInitialized() const {
  return true;
}

void Logs::Swap(Logs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Logs::InternalSwap(Logs* other) {
  using std::swap;
  CastToBase(&msgs_)->InternalSwap(CastToBase(&other->msgs_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Logs::GetMetadata() const {
  protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5fparsian_5fsimurosot_5fdebugs_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Color* Arena::CreateMaybeMessage< ::Color >(Arena* arena) {
  return Arena::CreateInternal< ::Color >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Vec2* Arena::CreateMaybeMessage< ::Vec2 >(Arena* arena) {
  return Arena::CreateInternal< ::Vec2 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Vec2D* Arena::CreateMaybeMessage< ::Vec2D >(Arena* arena) {
  return Arena::CreateInternal< ::Vec2D >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Cir2D* Arena::CreateMaybeMessage< ::Cir2D >(Arena* arena) {
  return Arena::CreateInternal< ::Cir2D >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Seg2D* Arena::CreateMaybeMessage< ::Seg2D >(Arena* arena) {
  return Arena::CreateInternal< ::Seg2D >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Rec2D* Arena::CreateMaybeMessage< ::Rec2D >(Arena* arena) {
  return Arena::CreateInternal< ::Rec2D >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Tex2D* Arena::CreateMaybeMessage< ::Tex2D >(Arena* arena) {
  return Arena::CreateInternal< ::Tex2D >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Pol2D* Arena::CreateMaybeMessage< ::Pol2D >(Arena* arena) {
  return Arena::CreateInternal< ::Pol2D >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Draws* Arena::CreateMaybeMessage< ::Draws >(Arena* arena) {
  return Arena::CreateInternal< ::Draws >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Log* Arena::CreateMaybeMessage< ::Log >(Arena* arena) {
  return Arena::CreateInternal< ::Log >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Logs* Arena::CreateMaybeMessage< ::Logs >(Arena* arena) {
  return Arena::CreateInternal< ::Logs >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
