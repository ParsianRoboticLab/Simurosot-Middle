// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_parsian_simurosot_detection.proto

#ifndef PROTOBUF_INCLUDED_messages_5fparsian_5fsimurosot_5fdetection_2eproto
#define PROTOBUF_INCLUDED_messages_5fparsian_5fsimurosot_5fdetection_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5fparsian_5fsimurosot_5fdetection_2eproto 

namespace protobuf_messages_5fparsian_5fsimurosot_5fdetection_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_messages_5fparsian_5fsimurosot_5fdetection_2eproto
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class RBall;
class RBallDefaultTypeInternal;
extern RBallDefaultTypeInternal _RBall_default_instance_;
class RRobot;
class RRobotDefaultTypeInternal;
extern RRobotDefaultTypeInternal _RRobot_default_instance_;
namespace google {
namespace protobuf {
template<> ::Frame* Arena::CreateMaybeMessage<::Frame>(Arena*);
template<> ::RBall* Arena::CreateMaybeMessage<::RBall>(Arena*);
template<> ::RRobot* Arena::CreateMaybeMessage<::RRobot>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class RBall : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RBall) */ {
 public:
  RBall();
  virtual ~RBall();

  RBall(const RBall& from);

  inline RBall& operator=(const RBall& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RBall(RBall&& from) noexcept
    : RBall() {
    *this = ::std::move(from);
  }

  inline RBall& operator=(RBall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RBall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RBall* internal_default_instance() {
    return reinterpret_cast<const RBall*>(
               &_RBall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RBall* other);
  friend void swap(RBall& a, RBall& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RBall* New() const final {
    return CreateMaybeMessage<RBall>(NULL);
  }

  RBall* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RBall>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RBall& from);
  void MergeFrom(const RBall& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RBall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:RBall)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5fparsian_5fsimurosot_5fdetection_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RRobot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RRobot) */ {
 public:
  RRobot();
  virtual ~RRobot();

  RRobot(const RRobot& from);

  inline RRobot& operator=(const RRobot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RRobot(RRobot&& from) noexcept
    : RRobot() {
    *this = ::std::move(from);
  }

  inline RRobot& operator=(RRobot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RRobot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RRobot* internal_default_instance() {
    return reinterpret_cast<const RRobot*>(
               &_RRobot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RRobot* other);
  friend void swap(RRobot& a, RRobot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RRobot* New() const final {
    return CreateMaybeMessage<RRobot>(NULL);
  }

  RRobot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RRobot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RRobot& from);
  void MergeFrom(const RRobot& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RRobot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // float x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  float x() const;
  void set_x(float value);

  // float y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  float y() const;
  void set_y(float value);

  // float ang = 4;
  void clear_ang();
  static const int kAngFieldNumber = 4;
  float ang() const;
  void set_ang(float value);

  // @@protoc_insertion_point(class_scope:RRobot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  float x_;
  float y_;
  float ang_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5fparsian_5fsimurosot_5fdetection_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Frame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Frame* other);
  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(NULL);
  }

  Frame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RRobot robots_yellow = 3;
  int robots_yellow_size() const;
  void clear_robots_yellow();
  static const int kRobotsYellowFieldNumber = 3;
  ::RRobot* mutable_robots_yellow(int index);
  ::google::protobuf::RepeatedPtrField< ::RRobot >*
      mutable_robots_yellow();
  const ::RRobot& robots_yellow(int index) const;
  ::RRobot* add_robots_yellow();
  const ::google::protobuf::RepeatedPtrField< ::RRobot >&
      robots_yellow() const;

  // repeated .RRobot robots_blue = 4;
  int robots_blue_size() const;
  void clear_robots_blue();
  static const int kRobotsBlueFieldNumber = 4;
  ::RRobot* mutable_robots_blue(int index);
  ::google::protobuf::RepeatedPtrField< ::RRobot >*
      mutable_robots_blue();
  const ::RRobot& robots_blue(int index) const;
  ::RRobot* add_robots_blue();
  const ::google::protobuf::RepeatedPtrField< ::RRobot >&
      robots_blue() const;

  // .RBall ball = 2;
  bool has_ball() const;
  void clear_ball();
  static const int kBallFieldNumber = 2;
  private:
  const ::RBall& _internal_ball() const;
  public:
  const ::RBall& ball() const;
  ::RBall* release_ball();
  ::RBall* mutable_ball();
  void set_allocated_ball(::RBall* ball);

  // uint32 frame_number = 1;
  void clear_frame_number();
  static const int kFrameNumberFieldNumber = 1;
  ::google::protobuf::uint32 frame_number() const;
  void set_frame_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Frame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::RRobot > robots_yellow_;
  ::google::protobuf::RepeatedPtrField< ::RRobot > robots_blue_;
  ::RBall* ball_;
  ::google::protobuf::uint32 frame_number_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5fparsian_5fsimurosot_5fdetection_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RBall

// float x = 1;
inline void RBall::clear_x() {
  x_ = 0;
}
inline float RBall::x() const {
  // @@protoc_insertion_point(field_get:RBall.x)
  return x_;
}
inline void RBall::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:RBall.x)
}

// float y = 2;
inline void RBall::clear_y() {
  y_ = 0;
}
inline float RBall::y() const {
  // @@protoc_insertion_point(field_get:RBall.y)
  return y_;
}
inline void RBall::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:RBall.y)
}

// -------------------------------------------------------------------

// RRobot

// uint32 id = 1;
inline void RRobot::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 RRobot::id() const {
  // @@protoc_insertion_point(field_get:RRobot.id)
  return id_;
}
inline void RRobot::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:RRobot.id)
}

// float x = 2;
inline void RRobot::clear_x() {
  x_ = 0;
}
inline float RRobot::x() const {
  // @@protoc_insertion_point(field_get:RRobot.x)
  return x_;
}
inline void RRobot::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:RRobot.x)
}

// float y = 3;
inline void RRobot::clear_y() {
  y_ = 0;
}
inline float RRobot::y() const {
  // @@protoc_insertion_point(field_get:RRobot.y)
  return y_;
}
inline void RRobot::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:RRobot.y)
}

// float ang = 4;
inline void RRobot::clear_ang() {
  ang_ = 0;
}
inline float RRobot::ang() const {
  // @@protoc_insertion_point(field_get:RRobot.ang)
  return ang_;
}
inline void RRobot::set_ang(float value) {
  
  ang_ = value;
  // @@protoc_insertion_point(field_set:RRobot.ang)
}

// -------------------------------------------------------------------

// Frame

// uint32 frame_number = 1;
inline void Frame::clear_frame_number() {
  frame_number_ = 0u;
}
inline ::google::protobuf::uint32 Frame::frame_number() const {
  // @@protoc_insertion_point(field_get:Frame.frame_number)
  return frame_number_;
}
inline void Frame::set_frame_number(::google::protobuf::uint32 value) {
  
  frame_number_ = value;
  // @@protoc_insertion_point(field_set:Frame.frame_number)
}

// .RBall ball = 2;
inline bool Frame::has_ball() const {
  return this != internal_default_instance() && ball_ != NULL;
}
inline void Frame::clear_ball() {
  if (GetArenaNoVirtual() == NULL && ball_ != NULL) {
    delete ball_;
  }
  ball_ = NULL;
}
inline const ::RBall& Frame::_internal_ball() const {
  return *ball_;
}
inline const ::RBall& Frame::ball() const {
  const ::RBall* p = ball_;
  // @@protoc_insertion_point(field_get:Frame.ball)
  return p != NULL ? *p : *reinterpret_cast<const ::RBall*>(
      &::_RBall_default_instance_);
}
inline ::RBall* Frame::release_ball() {
  // @@protoc_insertion_point(field_release:Frame.ball)
  
  ::RBall* temp = ball_;
  ball_ = NULL;
  return temp;
}
inline ::RBall* Frame::mutable_ball() {
  
  if (ball_ == NULL) {
    auto* p = CreateMaybeMessage<::RBall>(GetArenaNoVirtual());
    ball_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Frame.ball)
  return ball_;
}
inline void Frame::set_allocated_ball(::RBall* ball) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ball_;
  }
  if (ball) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ball = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ball, submessage_arena);
    }
    
  } else {
    
  }
  ball_ = ball;
  // @@protoc_insertion_point(field_set_allocated:Frame.ball)
}

// repeated .RRobot robots_yellow = 3;
inline int Frame::robots_yellow_size() const {
  return robots_yellow_.size();
}
inline void Frame::clear_robots_yellow() {
  robots_yellow_.Clear();
}
inline ::RRobot* Frame::mutable_robots_yellow(int index) {
  // @@protoc_insertion_point(field_mutable:Frame.robots_yellow)
  return robots_yellow_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::RRobot >*
Frame::mutable_robots_yellow() {
  // @@protoc_insertion_point(field_mutable_list:Frame.robots_yellow)
  return &robots_yellow_;
}
inline const ::RRobot& Frame::robots_yellow(int index) const {
  // @@protoc_insertion_point(field_get:Frame.robots_yellow)
  return robots_yellow_.Get(index);
}
inline ::RRobot* Frame::add_robots_yellow() {
  // @@protoc_insertion_point(field_add:Frame.robots_yellow)
  return robots_yellow_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RRobot >&
Frame::robots_yellow() const {
  // @@protoc_insertion_point(field_list:Frame.robots_yellow)
  return robots_yellow_;
}

// repeated .RRobot robots_blue = 4;
inline int Frame::robots_blue_size() const {
  return robots_blue_.size();
}
inline void Frame::clear_robots_blue() {
  robots_blue_.Clear();
}
inline ::RRobot* Frame::mutable_robots_blue(int index) {
  // @@protoc_insertion_point(field_mutable:Frame.robots_blue)
  return robots_blue_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::RRobot >*
Frame::mutable_robots_blue() {
  // @@protoc_insertion_point(field_mutable_list:Frame.robots_blue)
  return &robots_blue_;
}
inline const ::RRobot& Frame::robots_blue(int index) const {
  // @@protoc_insertion_point(field_get:Frame.robots_blue)
  return robots_blue_.Get(index);
}
inline ::RRobot* Frame::add_robots_blue() {
  // @@protoc_insertion_point(field_add:Frame.robots_blue)
  return robots_blue_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RRobot >&
Frame::robots_blue() const {
  // @@protoc_insertion_point(field_list:Frame.robots_blue)
  return robots_blue_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_messages_5fparsian_5fsimurosot_5fdetection_2eproto
